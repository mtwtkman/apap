# Stubs for requests.models (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._internal_utils import to_native_string, unicode_is_ascii
from .auth import HTTPBasicAuth
from .compat import Callable, Mapping, basestring, builtin_str, bytes, chardet, cookielib, is_py2, str, urlencode, urlsplit, urlunparse
from .cookies import _copy_cookie_jar, cookiejar_from_dict, get_cookie_header
from .exceptions import ChunkedEncodingError, ConnectionError, ContentDecodingError, HTTPError, InvalidURL, MissingSchema, StreamConsumedError
from .hooks import default_hooks
from .status_codes import codes
from .structures import CaseInsensitiveDict
from .utils import check_header_validity, get_auth_from_url, guess_filename, guess_json_utf, iter_slices, parse_header_links, requote_uri, stream_decode_response_unicode, super_len, to_key_val_list
from typing import Any, Optional

REDIRECT_STATI: Any
DEFAULT_REDIRECT_LIMIT: int
CONTENT_CHUNK_SIZE: Any
ITER_CHUNK_SIZE: int

class RequestEncodingMixin:
    @property
    def path_url(self): ...

class RequestHooksMixin:
    def register_hook(self, event: Any, hook: Any) -> None: ...
    def deregister_hook(self, event: Any, hook: Any): ...

class Request(RequestHooksMixin):
    hooks: Any = ...
    method: Any = ...
    url: Any = ...
    headers: Any = ...
    files: Any = ...
    data: Any = ...
    json: Any = ...
    params: Any = ...
    auth: Any = ...
    cookies: Any = ...
    def __init__(self, method: Optional[Any] = ..., url: Optional[Any] = ..., headers: Optional[Any] = ..., files: Optional[Any] = ..., data: Optional[Any] = ..., params: Optional[Any] = ..., auth: Optional[Any] = ..., cookies: Optional[Any] = ..., hooks: Optional[Any] = ..., json: Optional[Any] = ...) -> None: ...
    def prepare(self): ...

class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
    method: Any = ...
    url: Any = ...
    headers: Any = ...
    body: Any = ...
    hooks: Any = ...
    def __init__(self) -> None: ...
    def prepare(self, method: Optional[Any] = ..., url: Optional[Any] = ..., headers: Optional[Any] = ..., files: Optional[Any] = ..., data: Optional[Any] = ..., params: Optional[Any] = ..., auth: Optional[Any] = ..., cookies: Optional[Any] = ..., hooks: Optional[Any] = ..., json: Optional[Any] = ...) -> None: ...
    def copy(self): ...
    def prepare_method(self, method: Any) -> None: ...
    def prepare_url(self, url: Any, params: Any) -> None: ...
    def prepare_headers(self, headers: Any) -> None: ...
    def prepare_body(self, data: Any, files: Any, json: Optional[Any] = ...) -> None: ...
    def prepare_content_length(self, body: Any) -> None: ...
    def prepare_auth(self, auth: Any, url: str = ...) -> None: ...
    def prepare_cookies(self, cookies: Any) -> None: ...
    def prepare_hooks(self, hooks: Any) -> None: ...

class Response:
    __attrs__: Any = ...
    status_code: Any = ...
    headers: Any = ...
    raw: Any = ...
    url: Any = ...
    encoding: Any = ...
    history: Any = ...
    reason: Any = ...
    cookies: Any = ...
    elapsed: Any = ...
    request: Any = ...
    def __init__(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args: Any) -> None: ...
    def __bool__(self): ...
    def __nonzero__(self): ...
    def __iter__(self): ...
    @property
    def ok(self): ...
    @property
    def is_redirect(self): ...
    @property
    def is_permanent_redirect(self): ...
    @property
    def next(self): ...
    @property
    def apparent_encoding(self): ...
    def iter_content(self, chunk_size: int = ..., decode_unicode: bool = ...): ...
    def iter_lines(self, chunk_size: Any = ..., decode_unicode: bool = ..., delimiter: Optional[Any] = ...) -> None: ...
    @property
    def content(self): ...
    @property
    def text(self): ...
    def json(self, **kwargs: Any): ...
    @property
    def links(self): ...
    def raise_for_status(self) -> None: ...
    def close(self) -> None: ...
