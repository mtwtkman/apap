# Stubs for requests.utils (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .__version__ import __version__
from ._internal_utils import to_native_string
from .compat import Mapping, OrderedDict, basestring, bytes, getproxies, getproxies_environment, integer_types, is_py3, proxy_bypass, proxy_bypass_environment, quote, str, unquote, urlparse, urlunparse
from .cookies import cookiejar_from_dict
from .exceptions import FileModeWarning, InvalidHeader, InvalidURL, UnrewindableBodyError
from .structures import CaseInsensitiveDict
from typing import Any, Optional

NETRC_FILES: Any
DEFAULT_CA_BUNDLE_PATH: Any
DEFAULT_PORTS: Any

def proxy_bypass_registry(host: Any): ...
def dict_to_sequence(d: Any): ...
def super_len(o: Any): ...
def get_netrc_auth(url: Any, raise_errors: bool = ...): ...
def guess_filename(obj: Any): ...
def extract_zipped_paths(path: Any): ...
def from_key_val_list(value: Any): ...
def to_key_val_list(value: Any): ...
def parse_list_header(value: Any): ...
def parse_dict_header(value: Any): ...
def unquote_header_value(value: Any, is_filename: bool = ...): ...
def dict_from_cookiejar(cj: Any): ...
def add_dict_to_cookiejar(cj: Any, cookie_dict: Any): ...
def get_encodings_from_content(content: Any): ...
def get_encoding_from_headers(headers: Any): ...
def stream_decode_response_unicode(iterator: Any, r: Any) -> None: ...
def iter_slices(string: Any, slice_length: Any) -> None: ...
def get_unicode_from_response(r: Any): ...

UNRESERVED_SET: Any

def unquote_unreserved(uri: Any): ...
def requote_uri(uri: Any): ...
def address_in_network(ip: Any, net: Any): ...
def dotted_netmask(mask: Any): ...
def is_ipv4_address(string_ip: Any): ...
def is_valid_cidr(string_network: Any): ...
def set_environ(env_name: Any, value: Any) -> None: ...
def should_bypass_proxies(url: Any, no_proxy: Any): ...
def get_environ_proxies(url: Any, no_proxy: Optional[Any] = ...): ...
def select_proxy(url: Any, proxies: Any): ...
def default_user_agent(name: str = ...): ...
def default_headers(): ...
def parse_header_links(value: Any): ...
def guess_json_utf(data: Any): ...
def prepend_scheme_if_needed(url: Any, new_scheme: Any): ...
def get_auth_from_url(url: Any): ...
def check_header_validity(header: Any) -> None: ...
def urldefragauth(url: Any): ...
def rewind_body(prepared_request: Any) -> None: ...
